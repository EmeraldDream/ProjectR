// This file is Auto Generated by IDLAnalyzer
// Please don't edit manually
using System;
using System.Collections.Generic;

namespace FlowInLib
{
	public class SampleRpc : TcpSession
	{
		public enum EMsgType
		{
			voidReq,
			voidAck,
			sampleFuncReq,
			sampleFuncAck,
			sampleFuncPost,
			sampleFuncNtf,
			helloReq,
			helloAck,
			towParamReq,
			towParamAck,
			MaxNum
		}
		
		public SampleRpc()
		{
			_rpcCallbackNum = (int)EMsgType.MaxNum;
			_rpcCallbackArray = new RpcCallback[_rpcCallbackNum];
			_rpcCallbackArray[(int)EMsgType.voidReq] = voidReqStub;
			_rpcCallbackArray[(int)EMsgType.voidAck] = voidAckStub;
			_rpcCallbackArray[(int)EMsgType.sampleFuncReq] = sampleFuncReqStub;
			_rpcCallbackArray[(int)EMsgType.sampleFuncAck] = sampleFuncAckStub;
			_rpcCallbackArray[(int)EMsgType.sampleFuncPost] = sampleFuncPostStub;
			_rpcCallbackArray[(int)EMsgType.sampleFuncNtf] = sampleFuncNtfStub;
			_rpcCallbackArray[(int)EMsgType.helloReq] = helloReqStub;
			_rpcCallbackArray[(int)EMsgType.helloAck] = helloAckStub;
			_rpcCallbackArray[(int)EMsgType.towParamReq] = towParamReqStub;
			_rpcCallbackArray[(int)EMsgType.towParamAck] = towParamAckStub;
		}
		
		public virtual void voidReq (TcpSession session) {}
		public void voidReq ()
		{
			PushSendData((ushort)EMsgType.voidReq, null);
			SendBytes();
		}
		
		public virtual void voidAck (TcpSession session) {}
		public void voidAck ()
		{
			PushSendData((ushort)EMsgType.voidAck, null);
			SendBytes();
		}
		
		public virtual void sampleFuncReq (TcpSession session, SampleStruct ss) {}
		public void sampleFuncReq (SampleStruct ss)
		{
			AutoGenStructFor_sampleFuncReq msgData = new AutoGenStructFor_sampleFuncReq();
			msgData.ss = ss;
			PushSendData((ushort)EMsgType.sampleFuncReq, msgData);
			SendBytes();
		}
		
		public virtual void sampleFuncAck (TcpSession session, StructA sa) {}
		public void sampleFuncAck (StructA sa)
		{
			AutoGenStructFor_sampleFuncAck msgData = new AutoGenStructFor_sampleFuncAck();
			msgData.sa = sa;
			PushSendData((ushort)EMsgType.sampleFuncAck, msgData);
			SendBytes();
		}
		
		public virtual void sampleFuncPost (TcpSession session, SampleStruct ss) {}
		public void sampleFuncPost (SampleStruct ss)
		{
			AutoGenStructFor_sampleFuncPost msgData = new AutoGenStructFor_sampleFuncPost();
			msgData.ss = ss;
			PushSendData((ushort)EMsgType.sampleFuncPost, msgData);
			SendBytes();
		}
		
		public virtual void sampleFuncNtf (TcpSession session, StructA sa) {}
		public void sampleFuncNtf (StructA sa)
		{
			AutoGenStructFor_sampleFuncNtf msgData = new AutoGenStructFor_sampleFuncNtf();
			msgData.sa = sa;
			PushSendData((ushort)EMsgType.sampleFuncNtf, msgData);
			SendBytes();
		}
		
		public virtual void helloReq (TcpSession session, List<byte> strMsg) {}
		public void helloReq (List<byte> strMsg)
		{
			AutoGenStructFor_helloReq msgData = new AutoGenStructFor_helloReq();
			msgData.strMsg.AddRange(strMsg);
			PushSendData((ushort)EMsgType.helloReq, msgData);
			SendBytes();
		}
		
		public virtual void helloAck (TcpSession session, List<byte> strMsg) {}
		public void helloAck (List<byte> strMsg)
		{
			AutoGenStructFor_helloAck msgData = new AutoGenStructFor_helloAck();
			msgData.strMsg.AddRange(strMsg);
			PushSendData((ushort)EMsgType.helloAck, msgData);
			SendBytes();
		}
		
		public virtual void towParamReq (TcpSession session, SampleStruct ss, List<byte> name) {}
		public void towParamReq (SampleStruct ss, List<byte> name)
		{
			AutoGenStructFor_towParamReq msgData = new AutoGenStructFor_towParamReq();
			msgData.ss = ss;
			msgData.name.AddRange(name);
			PushSendData((ushort)EMsgType.towParamReq, msgData);
			SendBytes();
		}
		
		public virtual void towParamAck (TcpSession session, int count) {}
		public void towParamAck (int count)
		{
			AutoGenStructFor_towParamAck msgData = new AutoGenStructFor_towParamAck();
			msgData.count = count;
			PushSendData((ushort)EMsgType.towParamAck, msgData);
			SendBytes();
		}
		
		protected bool voidReqStub(byte[] buff, uint offset, uint buffLen)
		{
			voidReq();
			return true;
		}
		protected bool voidAckStub(byte[] buff, uint offset, uint buffLen)
		{
			voidAck();
			return true;
		}
		protected bool sampleFuncReqStub(byte[] buff, uint offset, uint buffLen)
		{
			AutoGenStructFor_sampleFuncReq msgData = new AutoGenStructFor_sampleFuncReq();
			uint readLen = msgData.Unserialize(buff, offset, buffLen);
			if (readLen <= 0) { msgData.Clear(); return false; }
			sampleFuncReq (this, msgData.ss);
			msgData.Clear();
			return true;
		}
		protected bool sampleFuncAckStub(byte[] buff, uint offset, uint buffLen)
		{
			AutoGenStructFor_sampleFuncAck msgData = new AutoGenStructFor_sampleFuncAck();
			uint readLen = msgData.Unserialize(buff, offset, buffLen);
			if (readLen <= 0) { msgData.Clear(); return false; }
			sampleFuncAck (this, msgData.sa);
			msgData.Clear();
			return true;
		}
		protected bool sampleFuncPostStub(byte[] buff, uint offset, uint buffLen)
		{
			AutoGenStructFor_sampleFuncPost msgData = new AutoGenStructFor_sampleFuncPost();
			uint readLen = msgData.Unserialize(buff, offset, buffLen);
			if (readLen <= 0) { msgData.Clear(); return false; }
			sampleFuncPost (this, msgData.ss);
			msgData.Clear();
			return true;
		}
		protected bool sampleFuncNtfStub(byte[] buff, uint offset, uint buffLen)
		{
			AutoGenStructFor_sampleFuncNtf msgData = new AutoGenStructFor_sampleFuncNtf();
			uint readLen = msgData.Unserialize(buff, offset, buffLen);
			if (readLen <= 0) { msgData.Clear(); return false; }
			sampleFuncNtf (this, msgData.sa);
			msgData.Clear();
			return true;
		}
		protected bool helloReqStub(byte[] buff, uint offset, uint buffLen)
		{
			AutoGenStructFor_helloReq msgData = new AutoGenStructFor_helloReq();
			uint readLen = msgData.Unserialize(buff, offset, buffLen);
			if (readLen <= 0) { msgData.Clear(); return false; }
			helloReq (this, msgData.strMsg);
			msgData.Clear();
			return true;
		}
		protected bool helloAckStub(byte[] buff, uint offset, uint buffLen)
		{
			AutoGenStructFor_helloAck msgData = new AutoGenStructFor_helloAck();
			uint readLen = msgData.Unserialize(buff, offset, buffLen);
			if (readLen <= 0) { msgData.Clear(); return false; }
			helloAck (this, msgData.strMsg);
			msgData.Clear();
			return true;
		}
		protected bool towParamReqStub(byte[] buff, uint offset, uint buffLen)
		{
			AutoGenStructFor_towParamReq msgData = new AutoGenStructFor_towParamReq();
			uint readLen = msgData.Unserialize(buff, offset, buffLen);
			if (readLen <= 0) { msgData.Clear(); return false; }
			towParamReq (this, msgData.ss, msgData.name);
			msgData.Clear();
			return true;
		}
		protected bool towParamAckStub(byte[] buff, uint offset, uint buffLen)
		{
			AutoGenStructFor_towParamAck msgData = new AutoGenStructFor_towParamAck();
			uint readLen = msgData.Unserialize(buff, offset, buffLen);
			if (readLen <= 0) { msgData.Clear(); return false; }
			towParamAck (this, msgData.count);
			msgData.Clear();
			return true;
		}
	}
}
